@using Abp.Authorization.Users
@using Abp.Configuration
@using Abp.Json
@using Abp.Zero.Configuration
@using Neptune.NsPay.Authorization
@using Neptune.NsPay.Authorization.Users
@using Neptune.NsPay.Net.Emailing
@using Neptune.NsPay.Web.Areas.AppArea.Models.Common.Modals
@using Neptune.NsPay.Web.Areas.AppArea.Models.Users
@using System.Linq
@model CreateOrEditUserModalViewModel
@inject IEmailSettingsChecker EmailSettingsChecker

@{
    var isSMTPSettingsProvided = await EmailSettingsChecker.EmailSettingsValidAsync();
}
<script>
    window.passwordComplexitySetting = @Html.Raw(Model.PasswordComplexitySetting.ToJsonString(indented: true));
</script>
@await Html.PartialAsync("~/Areas/AppArea/Views/Common/Modals/_ModalHeader.cshtml", new ModalHeaderViewModel(Model.IsEditMode ? (L("EditUser") + ": " + Model.User.UserName) : L("CreateNewUser")))

<div class="modal-body user-edit-modal">
    <ul class="nav nav-tabs" role="tablist">
        <li class="nav-item">
            <a href="#UserInformationsTab" class="nav-link active" data-bs-toggle="tab" role="tab">
                @L("UserInformations")
            </a>
        </li>
    </ul>
    <div class="tab-content">
        <div class="tab-pane pt-5 active" id="UserInformationsTab" role="tabpanel">
            <form name="UserInformationsForm" role="form" novalidate class="form-validation">

                @if (Model.IsEditMode)
                {
                    <input type="hidden" name="Id" value="@Model.User.Id" />
                }

                <div class="row">
                    <div class="col-sm-3 text-center margin-top-15 margin-bottom-15">
                        @if (Model.User.Id > 0)
                        {
                            <img src="@Url.Action("GetProfilePictureByUser", "Profile", new { area = string.Empty })?userId=@(Model.User.Id)&&profilePictureId=@(Model.ProfilePictureId)" width="128" height="128" class="img-thumbnail img-rounded user-edit-dialog-profile-image" />
                        }
                        else
                        {
                            <img src="@Url.Content($"{ApplicationPath}Common/Images/default-profile-picture.png")" width="128" height="128" class="img-thumbnail img-rounded user-edit-dialog-profile-image" />
                        }

                        @if (Model.User.Id > 0 && await PermissionChecker.IsGrantedAsync(AppPermissions.Pages_Administration_Users_ChangeProfilePicture))
                        {
                            <button class="btn btn-light btn-sm mb-5" id="changeProfilePicture">@L("ChangeProfilePicture")</button>
                        }
                    </div>
                    <div class="col-sm-9">
                        <div class="mb-5">
                            <label for="Name" class="form-label">@L("FirstName")</label><span class="text-danger">*</span>
                            <input id="Name" class="form-control" value="@Model.User.Name" type="text" name="Name" required maxlength="@Neptune.NsPay.Authorization.Users.User.MaxNameLength">
                        </div>

                        <div class="mb-5">
                            <label for="Surname" class="form-label">@L("Surname")</label><span class="text-danger">*</span>
                            <input id="Surname" type="text" name="Surname" class="form-control" value="@Model.User.Surname" required maxlength="@Neptune.NsPay.Authorization.Users.User.MaxSurnameLength">
                        </div>
                    </div>
                </div>

                <div class="form-group row my-3">
                    <div class="col-lg-12">
                        <label for="EmailAddress" class="form-label">@L("EmailAddress")</label><span class="text-danger">*</span>
                        <input id="EmailAddress" type="email" name="EmailAddress" class="form-control" value="@Model.User.EmailAddress" required maxlength="@AbpUserBase.MaxEmailAddressLength">
                    </div>
                    @Html.HiddenFor(m=>m.User.UserType)
                </div>

                <div class="mb-5">
                    <label for="PhoneNumber" class="form-label">@L("PhoneNumber")</label>
                    <input id="PhoneNumber" type="number" inputmode="numeric" name="PhoneNumber" class="form-control" value="@Model.User.PhoneNumber" maxlength="@UserConsts.MaxPhoneLength" minlength="@UserConsts.MinPhoneLength">
                </div>

                <div class="mb-5">
                    <label for="Roles" class="form-label">@L("Roles") <span id="assigned-role-count" class="badge badge-success me-2">@Model.AssignedRoleCount</span></label> <span class="text-danger">*</span>

                    <div class="user-role-checkbox-list">
                        @foreach (var role in Model.Roles)
                        {
                            <div class="checkbox-list pb-1">
                                <label for="EditUser_@(role.RoleName)" class="form-check form-check-custom form-check-solid mb-2">
                                    <input id="EditUser_@(role.RoleName)"
                                           type="checkbox"
                                           name="@(role.RoleName)"
                                           class="form-check-input chkGroupRoles"
                                           value="true"
                                    @Html.Raw(role.IsAssigned ? "checked=\"checked\"" : "")
                                    @Html.Raw(role.InheritedFromOrganizationUnit ? "disabled=\"disabled\"" : "")>
                                    <span class="form-check-label">
                                        @role.RoleDisplayName
                                        @if (role.InheritedFromOrganizationUnit)
                                        {
                                            <small>(@L("RoleIsInheritedFromOrganizationUnit"))</small>
                                        }
                                    </span>
                                </label>
                            </div>
                        }
                    </div>
                    <input name="chkGroupRoles" id="chkGroupRolesValidator" type="hidden" groupclass="chkGroupRoles" />
                </div>

                <div class="mb-5 form-md-line-input form-md-floating-label">
                    <label for="UserName" class="form-label">@L("UserName")</label><span class="text-danger">*</span>
                    <div class="input-group">
                        <input id="UserName" type="text" @Html.Raw(!Model.CanChangeUserName ? "disabled=\"disabled\"" : "") name="UserName" class="form-control" value="@Model.User.UserName" required maxlength="@AbpUserBase.MaxUserNameLength">
                        <span class="input-group-text" data-bs-toggle="tooltip" data-bs-placement="right" title="@L("AllowedUserNameCharactersInfoText", Model.AllowedUserNameCharacters)">
                            <i class="fas fa-info-circle"></i>
                        </span>
                    </div>
                    @if (!Model.CanChangeUserName)
                    {
                        <span class="form-text text-muted">@L("CanNotChangeAdminUserName")</span>
                    }
                </div>

                <div class="mb-5 user-password" style="display:block"  data-kt-password-meter="true">
                    <label for="EditUser_Password" class="form-label">@L("Password")</label>
                    <div class="position-relative mb-3">
                        <input id="EditUser_Password" type="password" name="Password" class="form-control auto-complete-off"
                               maxlength="@Neptune.NsPay.Authorization.Users.User.MaxPlainPasswordLength" autocomplete="new-password" @Html.Raw(!Model.IsEditMode ? "required value=\"123456\"" : "")>

                        <!--begin::Visibility toggle-->
                        <span class="btn btn-sm btn-icon position-absolute translate-middle top-50 end-0 me-n2"
                              data-kt-password-meter-control="visibility">
                            <i class="fas fa-eye-slash fs-4"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span></i>
                            <i class="fas fa-eye d-none fs-4"><span class="path1"></span><span class="path2"></span><span class="path3"></span></i>
                        </span>
                        <!--end::Visibility toggle-->
                    </div>
                </div>

                <div class="mb-5 user-password" style="display:block" data-kt-password-meter="true">
                    <label for="PasswordRepeat" class="form-label">@L("PasswordRepeat")</label>
                    <div class="position-relative mb-3">
                        <!--begin::Visibility toggle-->
                        <span class="btn btn-sm btn-icon position-absolute translate-middle top-50 end-0 me-n2"
                              data-kt-password-meter-control="visibility">
                            <i class="fas fa-eye-slash fs-4"><span class="path1"></span><span class="path2"></span><span class="path3"></span><span class="path4"></span></i>
                            <i class="fas fa-eye d-none fs-4"><span class="path1"></span><span class="path2"></span><span class="path3"></span></i>
                        </span>
                        <!--end::Visibility toggle-->
                        <input id="PasswordRepeat" type="password" name="PasswordRepeat" class="form-control auto-complete-off" readonly onfocus="this.removeAttribute('readonly');"
                               maxlength="@Neptune.NsPay.Authorization.Users.User.MaxPlainPasswordLength" equalto="#EditUser_Password" autocomplete="new-password"  @Html.Raw(!Model.IsEditMode ? "required value=\"123456\"" : "")>
                    </div>
                </div>

                <div class="checkbox-list">

                    <input id="EditUser_ShouldChangePasswordOnNextLogin" type="hidden" name="ShouldChangePasswordOnNextLogin" class="form-check-input" value="false">
                    <input id="EditUser_SendActivationEmail" type="hidden" name="SendActivationEmail" class="form-check-input" value="false">
                 

                    <label for="EditUser_IsActive" class="form-check form-check-custom form-check-solid mb-2">
                        <input id="EditUser_IsActive" type="checkbox" name="IsActive" class="form-check-input" value="true" @Html.Raw(Model.User.IsActive ? "checked=\"checked\"" : "")>
                        <span class="form-check-label">
                            @L("Active")
                        </span>
                    </label>
                    @if (SettingManager.GetSettingValue<bool>(AbpZeroSettingNames.UserManagement.UserLockOut.IsEnabled))
                    {
                        <label for="EditUser_IsLockoutEnabled" class="form-check form-check-custom form-check-solid mb-2">
                            <input id="EditUser_IsLockoutEnabled" type="checkbox" name="IsLockoutEnabled" class="form-check-input" value="true" @Html.Raw(Model.User.IsLockoutEnabled ? "checked=\"checked\"" : "")>
                            <span class="form-check-label">
                                @L("IsLockoutEnabled")
                            </span>
                            <i class="fas fa-info-circle ms-2" data-bs-toggle="tooltip" title="@L("IsLockoutEnabled_Hint")"></i>
                        </label>
                    }
                </div>

            </form>
        </div>
        <div class="tab-pane pt-5" id="RolesTab" role="tabpanel">
            <div class="user-role-checkbox-list">
            </div>
        </div>
        <div class="tab-pane pt-5" id="MerchantsTab" role="tabpanel">
            <div class="user-merchant-checkbox-list">
                @foreach (var merInfo in Model.Merechants)
                {
                    <input type="hidden" name="@(merInfo.MerchantName)" value="@(merInfo.IsAssigned ? "true" : "false")" />
                }
            </div>
        </div>
        <div class="tab-pane pt-5" id="OrganizationUnitsTab" role="tabpanel">
            <div class="list-group">
                @await Html.PartialAsync("~/Areas/AppArea/Views/Common/_OrganizationTree.cshtml", Model)
            </div>
        </div>
    </div>
</div>

@await Html.PartialAsync("~/Areas/AppArea/Views/Common/Modals/_ModalFooterWithSaveAndCancel.cshtml")
